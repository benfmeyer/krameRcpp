// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// r_chilling_cpp
NumericVector r_chilling_cpp(NumericVector temp, double tc_min, double tc_max, double tc_opt);
RcppExport SEXP _krameRcpp_r_chilling_cpp(SEXP tempSEXP, SEXP tc_minSEXP, SEXP tc_maxSEXP, SEXP tc_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< double >::type tc_min(tc_minSEXP);
    Rcpp::traits::input_parameter< double >::type tc_max(tc_maxSEXP);
    Rcpp::traits::input_parameter< double >::type tc_opt(tc_optSEXP);
    rcpp_result_gen = Rcpp::wrap(r_chilling_cpp(temp, tc_min, tc_max, tc_opt));
    return rcpp_result_gen;
END_RCPP
}
// state_cpp
NumericVector state_cpp(NumericVector rate, DateVector time);
RcppExport SEXP _krameRcpp_state_cpp(SEXP rateSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< DateVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(state_cpp(rate, time));
    return rcpp_result_gen;
END_RCPP
}
// r_forcing_cpp
NumericVector r_forcing_cpp(NumericVector temp, NumericVector s_chill, float tf_min);
RcppExport SEXP _krameRcpp_r_forcing_cpp(SEXP tempSEXP, SEXP s_chillSEXP, SEXP tf_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_chill(s_chillSEXP);
    Rcpp::traits::input_parameter< float >::type tf_min(tf_minSEXP);
    rcpp_result_gen = Rcpp::wrap(r_forcing_cpp(temp, s_chill, tf_min));
    return rcpp_result_gen;
END_RCPP
}
// leaf_out_status_cpp
NumericVector leaf_out_status_cpp(NumericVector s_force);
RcppExport SEXP _krameRcpp_leaf_out_status_cpp(SEXP s_forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s_force(s_forceSEXP);
    rcpp_result_gen = Rcpp::wrap(leaf_out_status_cpp(s_force));
    return rcpp_result_gen;
END_RCPP
}
// accumulated_leaf_out_cpp
NumericVector accumulated_leaf_out_cpp(NumericVector lo_stat);
RcppExport SEXP _krameRcpp_accumulated_leaf_out_cpp(SEXP lo_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lo_stat(lo_statSEXP);
    rcpp_result_gen = Rcpp::wrap(accumulated_leaf_out_cpp(lo_stat));
    return rcpp_result_gen;
END_RCPP
}
// late_frost_status_cpp
NumericVector late_frost_status_cpp(NumericVector accum_lo, NumericVector tmin, float thresh, float range);
RcppExport SEXP _krameRcpp_late_frost_status_cpp(SEXP accum_loSEXP, SEXP tminSEXP, SEXP threshSEXP, SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type accum_lo(accum_loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< float >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< float >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(late_frost_status_cpp(accum_lo, tmin, thresh, range));
    return rcpp_result_gen;
END_RCPP
}
// test_fun
NumericVector test_fun(NumericVector nums);
RcppExport SEXP _krameRcpp_test_fun(SEXP numsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nums(numsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fun(nums));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_krameRcpp_r_chilling_cpp", (DL_FUNC) &_krameRcpp_r_chilling_cpp, 4},
    {"_krameRcpp_state_cpp", (DL_FUNC) &_krameRcpp_state_cpp, 2},
    {"_krameRcpp_r_forcing_cpp", (DL_FUNC) &_krameRcpp_r_forcing_cpp, 3},
    {"_krameRcpp_leaf_out_status_cpp", (DL_FUNC) &_krameRcpp_leaf_out_status_cpp, 1},
    {"_krameRcpp_accumulated_leaf_out_cpp", (DL_FUNC) &_krameRcpp_accumulated_leaf_out_cpp, 1},
    {"_krameRcpp_late_frost_status_cpp", (DL_FUNC) &_krameRcpp_late_frost_status_cpp, 4},
    {"_krameRcpp_test_fun", (DL_FUNC) &_krameRcpp_test_fun, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_krameRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
